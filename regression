# Import necessary libraries
import numpy as np
import matplotlib.pyplot as plt

# Generate synthetic data
np.random.seed(42)
X = 2 * np.random.rand(100, 1)  # Random features
y = 4 + 3 * X + np.random.randn(100, 1)  # Linear relation with noise

# Add a bias (intercept) term to X
X_b = np.c_[np.ones((100, 1)), X]  # Add a column of ones to X

# Compute the optimal weights using the Normal Equation
theta_best = np.linalg.inv(X_b.T.dot(X_b)).dot(X_b.T).dot(y)

print(f"Intercept: {theta_best[0][0]}")
print(f"Coefficient: {theta_best[1][0]}")

# Make predictions
X_new = np.array([[0], [2]])  # New data points for prediction
X_new_b = np.c_[np.ones((2, 1)), X_new]  # Add bias term
y_predict = X_new_b.dot(theta_best)

# Plot the results
plt.scatter(X, y, color='blue', label="Data Points")
plt.plot(X_new, y_predict, color='red', linewidth=2, label="Regression Line")
plt.xlabel("Feature (X)")
plt.ylabel("Target (y)")
plt.legend()
plt.show()
